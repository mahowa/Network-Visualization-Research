#fc <- cluster_fast_greedy(xlist)
#modularity(fc)
#modularity_matrix(xlist, membership(fc))
##Edge Betweenness
#eb <- cluster_edge_betweenness(xlist)
#modularity(eb)
#modularity_matrix(xlist, membership(eb))
##Cluster Spinglass
#cluster_spinglass(xlist, spins=2)
#cluster_spinglass(xlist, vertex=1)
## Load package
library(igraph)
library(TDA)
#Zachs karate club
modularityTest1 <- function(){
xlist<-read.graph("C:\\Users\\jdbba\\OneDrive\\Documents\\School\\Research\\DataSets\\Zach's karate club\\karate\\karate.gml", format="gml")
plot(xlist)
##Persistant Homology of 1st graph
Diag<-ripsDiag(distances(xlist),1,20, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
plot(Diag[["diagram"]], col='red')
##Cluster WalkTrap
#Modularity
wtc <- cluster_fast_greedy(xlist)
plot(wtc, xlist )
##Persistant Homology of modular graph
mDiag <- ripsDiag(merges(wtc),1,50, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
plot(mDiag[["diagram"]], col='red')
bottleneck(Diag[["diagram"]],mDiag[["diagram"]])
}
modularityTest1()
#modularity(wtc)
#modularity_matrix(xlist, membership(wtc))
#ripsDiag(modularity_matrix(xlist, membership(wtc)), 1, 10)
#plot(modularity_matrix(xlist, membership(wtc)))
#plot(ripsDiag(modularity_matrix(xlist, membership(wtc)), 1, 10))
##Cluster fast-greedy
#fc <- cluster_fast_greedy(xlist)
#modularity(fc)
#modularity_matrix(xlist, membership(fc))
##Edge Betweenness
#eb <- cluster_edge_betweenness(xlist)
#modularity(eb)
#modularity_matrix(xlist, membership(eb))
##Cluster Spinglass
#cluster_spinglass(xlist, spins=2)
#cluster_spinglass(xlist, vertex=1)
## Load package
library(igraph)
library(TDA)
#Zachs karate club
modularityTest1 <- function(){
xlist<-read.graph("C:\\Users\\jdbba\\OneDrive\\Documents\\School\\Research\\DataSets\\Zach's karate club\\karate\\karate.gml", format="gml")
plot(xlist)
##Persistant Homology of 1st graph
Diag<-ripsDiag(distances(xlist),1,20, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
plot(Diag[["diagram"]], col='red')
##Cluster WalkTrap
#Modularity
wtc <- cluster_fast_greedy(xlist)
plot(wtc, xlist )
##Persistant Homology of modular graph
mDiag <- ripsDiag(merges(wtc),1,50, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
plot(mDiag[["diagram"]], col='red')
bottleneck(Diag[["diagram"]],mDiag[["diagram"]])
}
modularityTest1()
#modularity(wtc)
#modularity_matrix(xlist, membership(wtc))
#ripsDiag(modularity_matrix(xlist, membership(wtc)), 1, 10)
#plot(modularity_matrix(xlist, membership(wtc)))
#plot(ripsDiag(modularity_matrix(xlist, membership(wtc)), 1, 10))
##Cluster fast-greedy
#fc <- cluster_fast_greedy(xlist)
#modularity(fc)
#modularity_matrix(xlist, membership(fc))
##Edge Betweenness
#eb <- cluster_edge_betweenness(xlist)
#modularity(eb)
#modularity_matrix(xlist, membership(eb))
##Cluster Spinglass
#cluster_spinglass(xlist, spins=2)
#cluster_spinglass(xlist, vertex=1)
## Load package
library(igraph)
library(TDA)
#Zachs karate club
modularityTest1 <- function(){
xlist<-read.graph("C:\\Users\\jdbba\\OneDrive\\Documents\\School\\Research\\DataSets\\Zach's karate club\\karate\\karate.gml", format="gml")
plot(xlist)
##Persistant Homology of 1st graph
Diag<-ripsDiag(distances(xlist),1,20, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
plot(Diag[["diagram"]], col='red')
##Cluster WalkTrap
#Modularity
wtc <- cluster_walktrap(xlist)
plot(wtc, xlist )
##Persistant Homology of modular graph
mDiag <- ripsDiag(merges(wtc),1,50, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
plot(mDiag[["diagram"]], col='red')
bottleneck(Diag[["diagram"]],mDiag[["diagram"]])
}
modularityTest1()
#modularity(wtc)
#modularity_matrix(xlist, membership(wtc))
#ripsDiag(modularity_matrix(xlist, membership(wtc)), 1, 10)
#plot(modularity_matrix(xlist, membership(wtc)))
#plot(ripsDiag(modularity_matrix(xlist, membership(wtc)), 1, 10))
##Cluster fast-greedy
#fc <- cluster_fast_greedy(xlist)
#modularity(fc)
#modularity_matrix(xlist, membership(fc))
##Edge Betweenness
#eb <- cluster_edge_betweenness(xlist)
#modularity(eb)
#modularity_matrix(xlist, membership(eb))
##Cluster Spinglass
#cluster_spinglass(xlist, spins=2)
#cluster_spinglass(xlist, vertex=1)
library(igraph)
## Load package
library(igraph)
library(TDA)
#Zachs karate club
modularityTest1 <- function(){
xlist<-read.graph("C:\\Users\\jdbba\\OneDrive\\Documents\\School\\Research\\DataSets\\Zach's karate club\\karate\\karate.gml", format="gml")
plot(xlist)
##Persistant Homology of 1st graph
Diag<-ripsDiag(distances(xlist),1,6, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
plot(Diag[["diagram"]], col='red')
##Cluster WalkTrap
#Modularity
wtc<-cluster_leading_eigen(xlist)
plot(wtc, xlist )
merges(wtc)
##Persistant Homology of modular graph
mDiag <- ripsDiag(merges(wtc),1,25, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
plot(mDiag[["diagram"]], col='red')
bottleneck(Diag[["diagram"]],mDiag[["diagram"]])
}
modularityTest1()
## Load package
library(igraph)
library(TDA)
#Zachs karate club
modularityTest1 <- function(){
xlist<-read.graph("C:\\Users\\jdbba\\OneDrive\\Documents\\School\\Research\\DataSets\\Zach's karate club\\karate\\karate.gml", format="gml")
plot(xlist)
##Persistant Homology of 1st graph
Diag<-ripsDiag(distances(xlist),1,6, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
plot(Diag[["diagram"]], col='red')
##Cluster WalkTrap
#Modularity
wtc<-cluster_edge_betweenness(xlist)
plot(wtc, xlist )
merges(wtc)
##Persistant Homology of modular graph
mDiag <- ripsDiag(merges(wtc),1,25, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
plot(mDiag[["diagram"]], col='red')
bottleneck(Diag[["diagram"]],mDiag[["diagram"]])
}
modularityTest1()
## Load package
library(igraph)
library(TDA)
#Zachs karate club
modularityTest1 <- function(){
xlist<-read.graph("C:\\Users\\jdbba\\OneDrive\\Documents\\School\\Research\\DataSets\\Zach's karate club\\karate\\karate.gml", format="gml")
plot(xlist)
##Persistant Homology of 1st graph
Diag<-ripsDiag(distances(xlist),1,6, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
plot(Diag[["diagram"]], col='red')
##Cluster WalkTrap
#Modularity
wtc<-cluster_edge_betweenness(xlist)
plot(wtc, xlist )
merges(wtc)
##Persistant Homology of modular graph
mDiag <- ripsDiag(merges(wtc),1,25, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
mDiag
plot(mDiag[["diagram"]], col='red')
bottleneck(Diag[["diagram"]],mDiag[["diagram"]])
}
modularityTest1()
## Load package
library(igraph)
library(TDA)
#Zachs karate club
modularityTest1 <- function(){
xlist<-read.graph("C:\\Users\\jdbba\\OneDrive\\Documents\\School\\Research\\DataSets\\Zach's karate club\\karate\\karate.gml", format="gml")
plot(xlist)
##Persistant Homology of 1st graph
Diag<-ripsDiag(distances(xlist),1,6, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
plot(Diag[["diagram"]], col='red')
##Cluster WalkTrap
#Modularity
wtc<-cluster_edge_betweenness(xlist)
plot(wtc, xlist )
merges(wtc)
##Persistant Homology of modular graph
mDiag <- ripsDiag(merges(wtc),1,25, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
print mDiag
plot(mDiag[["diagram"]], col='red')
bottleneck(Diag[["diagram"]],mDiag[["diagram"]])
}
modularityTest1()
## Load package
library(igraph)
library(TDA)
#Zachs karate club
modularityTest1 <- function(){
xlist<-read.graph("C:\\Users\\jdbba\\OneDrive\\Documents\\School\\Research\\DataSets\\Zach's karate club\\karate\\karate.gml", format="gml")
plot(xlist)
##Persistant Homology of 1st graph
Diag<-ripsDiag(distances(xlist),1,6, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
plot(Diag[["diagram"]], col='red')
##Cluster WalkTrap
#Modularity
wtc<-cluster_edge_betweenness(xlist)
plot(wtc, xlist )
merges(wtc)
##Persistant Homology of modular graph
mDiag <- ripsDiag(merges(wtc),1,25, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
summary(mDiag)
plot(mDiag[["diagram"]], col='red')
bottleneck(Diag[["diagram"]],mDiag[["diagram"]])
}
modularityTest1()
## Load package
library(igraph)
library(TDA)
#Zachs karate club
modularityTest1 <- function(){
xlist<-read.graph("C:\\Users\\jdbba\\OneDrive\\Documents\\School\\Research\\DataSets\\Zach's karate club\\karate\\karate.gml", format="gml")
plot(xlist)
##Persistant Homology of 1st graph
Diag<-ripsDiag(distances(xlist),1,6, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
plot(Diag[["diagram"]], col='red')
##Cluster WalkTrap
#Modularity
wtc<-cluster_edge_betweenness(xlist)
plot(wtc, xlist )
merges(wtc)
##Persistant Homology of modular graph
mDiag <- ripsDiag(merges(wtc),1,25, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
summary(mDiag)
mDiag[["diagram"]]
plot(mDiag[["diagram"]], col='red')
bottleneck(Diag[["diagram"]],mDiag[["diagram"]])
}
modularityTest1()
q
## Load package
library(igraph)
library(TDA)
#Zachs karate club
xlist<-read.graph("C:\\Users\\jdbba\\OneDrive\\Documents\\School\\Research\\DataSets\\Zach's karate club\\karate\\karate.gml", format="gml")
plot(xlist)
##Persistant Homology of 1st graph
Diag<-ripsDiag(distances(xlist),1,6, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
plot(Diag[["diagram"]], col='red')
##Cluster WalkTrap
#Modularity
wtc<-cluster_edge_betweenness(xlist)
plot(wtc, xlist )
merges(wtc)
##Persistant Homology of modular graph
mDiag <- ripsDiag(merges(wtc),1,25, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
summary(mDiag)
mDiag[["diagram"]]
plot(mDiag[["diagram"]], col='red')
bottleneck(Diag[["diagram"]],mDiag[["diagram"]])
exprs <- as.matrix(read.table("C:\Users\jdbba\OneDrive\Documents\School\Research\Tests\Python Modularity Testing\dipha\Test\diag1.txt", header=FALSE, sep = " ",
as.is=TRUE))
d<-read.table(""C:\Users\jdbba\OneDrive\Documents\School\Research\Tests\Python Modularity Testing\dipha\Test\diag1.txt"",header=TRUE,sep=" ")
d
d<-read.table("C:\Users\jdbba\OneDrive\Documents\School\Research\Tests\Python Modularity Testing\dipha\Test\diag1.txt",header=TRUE,sep=" ")
d
d<-read.table("C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag1.txt",header=TRUE,sep=" ")
d
library(TDA)
d<-read.table("C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag1.txt",header=TRUE,sep=" ")
plot(d)
library(TDA)
d1<-read.table("C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag1.txt",header=TRUE,sep=" ")
d2<-read.table("C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag2.txt",header=TRUE,sep=" ")
bottleneck(d1,d2)
## Load package
library(igraph)
library(TDA)
#Zachs karate club
xlist<-read.graph("C:\\Users\\jdbba\\OneDrive\\Documents\\School\\Research\\DataSets\\Zach's karate club\\karate\\karate.gml", format="gml")
plot(xlist)
##Persistant Homology of 1st graph
Diag<-ripsDiag(distances(xlist),1,6, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
plot(Diag[["diagram"]], col='red')
##Cluster WalkTrap
#Modularity
wtc<-cluster_edge_betweenness(xlist)
plot(wtc, xlist )
merges(wtc)
##Persistant Homology of modular graph
mDiag <- ripsDiag(merges(wtc),1,25, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
summary(mDiag)
mDiag[["diagram"]]
plot(mDiag[["diagram"]], col='red')
bottleneck(Diag[["diagram"]],mDiag[["diagram"]])
library(TDA)
d1<-read.table("C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag1.txt",header=TRUE,sep=" ")
d2<-read.table("C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag2.txt",header=TRUE,sep=" ")
mat <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag1.txt')
mat <- matrix(mat, ncol = 3, byrow = TRUE)
bottleneck(d1,d2)
mat <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag1.txt')
mat <- matrix(mat, ncol = 3, byrow = TRUE)
View(mat)
library(TDA)
mat <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag1.txt')
mat <- matrix(mat, ncol = 3, byrow = TRUE)
mat2 <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag2.txt')
mat2 <- matrix(mat2, ncol = 3, byrow = TRUE)
bottleneck(mat,mat2)
library(TDA)
mat <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag1.txt')
mat <- matrix(mat, ncol = 3, byrow = TRUE)
mat2 <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag2.txt')
mat2 <- matrix(mat2, ncol = 3, byrow = TRUE)
mat
bottleneck(mat,mat2)
library(TDA)
mat <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag1.txt')
mat <- matrix(mat, ncol = 3, byrow = TRUE)
mat2 <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag2.txt')
mat2 <- matrix(mat2, ncol = 3, byrow = TRUE)
mat
mat2
bottleneck(mat,mat2)
library(TDA)
mat <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag1.txt')
mat <- matrix(mat, ncol = 3, byrow = TRUE)
mat2 <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag2.txt')
mat2 <- matrix(mat2, ncol = 3, byrow = TRUE)
mat
mat2
bottleneck(mat,mat2)
plot.diagram(mat)
plot.diagram(mat2)
library(TDA)
mat <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag1.txt')
mat <- matrix(mat, ncol = 3, byrow = TRUE)
mat2 <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag2.txt')
mat2 <- matrix(mat2, ncol = 3, byrow = TRUE)
mat
mat2
bottleneck(mat,mat2)
plot.diagram(mat)
plot.diagram(mat2)
## Load package
library(igraph)
library(TDA)
#Zachs karate club
xlist<-read.graph("C:\\Users\\jdbba\\OneDrive\\Documents\\School\\Research\\DataSets\\Zach's karate club\\karate\\karate.gml", format="gml")
plot(xlist)
##Persistant Homology of 1st graph
Diag<-ripsDiag(distances(xlist),1,6, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
plot(Diag[["diagram"]], col='red')
## Load package
library(igraph)
library(TDA)
#Zachs karate club
xlist<-read.graph("C:\\Users\\jdbba\\OneDrive\\Documents\\School\\Research\\DataSets\\Zach's karate club\\karate\\karate.gml", format="gml")
plot(xlist)
##Persistant Homology of 1st graph
Diag<-ripsDiag(distances(xlist),1,6, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
distances(xlist)
library(TDA)
mat <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag1.txt')
mat <- matrix(mat, ncol = 3, byrow = TRUE)
mat2 <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag2.txt')
mat2 <- matrix(mat2, ncol = 3, byrow = TRUE)
mat
mat2
bottleneck(mat,mat2)
plot.diagram(mat)
plot.diagram(mat2)
library(TDA)
mat <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag1.txt')
mat <- matrix(mat, ncol = 3, byrow = TRUE)
mat2 <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag2.txt')
mat2 <- matrix(mat2, ncol = 3, byrow = TRUE)
mat
mat2
bottleneck(mat,mat2)
plot.diagram(mat)
plot.diagram(mat2)
dist_mat1 <- scan('C:\Users\jdbba\OneDrive\Documents\School\Research\Tests\Python Modularity Testing\Matrix_Files\M1.csv')
dist_mat1 <- matrix(dist_mat1, ncol = 3, byrow = TRUE)
library(TDA)
mat <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag1.txt')
mat <- matrix(mat, ncol = 3, byrow = TRUE)
mat2 <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag2.txt')
mat2 <- matrix(mat2, ncol = 3, byrow = TRUE)
mat
mat2
bottleneck(mat,mat2)
plot.diagram(mat)
plot.diagram(mat2)
dist_mat1 <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/Matrix_Files/M1.csv')
dist_mat1 <- matrix(dist_mat1, ncol = 3, byrow = TRUE)
library(TDA)
mat <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag1.txt')
mat <- matrix(mat, ncol = 3, byrow = TRUE)
mat2 <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag2.txt')
mat2 <- matrix(mat2, ncol = 3, byrow = TRUE)
mat
mat2
bottleneck(mat,mat2)
plot.diagram(mat)
plot.diagram(mat2)
dist_mat1 <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/Matrix_Files/M1.csv')
dist_mat1 <- matrix(dist_mat1, ncol = 33, byrow = TRUE)
library(TDA)
mat <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag1.txt')
mat <- matrix(mat, ncol = 3, byrow = TRUE)
mat2 <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag2.txt')
mat2 <- matrix(mat2, ncol = 3, byrow = TRUE)
mat
mat2
bottleneck(mat,mat2)
plot.diagram(mat)
plot.diagram(mat2)
dist_mat1 <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/Matrix_Files/M1.csv')
dist_mat1 <- matrix(dist_mat1, ncol = 33, byrow = TRUE)
library(TDA)
mat <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag1.txt')
mat <- matrix(mat, ncol = 3, byrow = TRUE)
mat2 <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag2.txt')
mat2 <- matrix(mat2, ncol = 3, byrow = TRUE)
mat
mat2
bottleneck(mat,mat2)
plot.diagram(mat)
plot.diagram(mat2)
library(TDA)
mat <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag1.txt')
mat <- matrix(mat, ncol = 3, byrow = TRUE)
mat2 <- scan('C:/Users/jdbba/OneDrive/Documents/School/Research/Tests/Python Modularity Testing/dipha/Test/diag2.txt')
mat2 <- matrix(mat2, ncol = 3, byrow = TRUE)
mat
mat2
bottleneck(mat,mat2)
plot.diagram(mat)
plot.diagram(mat2)
## Load package
library(igraph)
library(TDA)
#Zachs karate club
xlist<-read.graph("C:\\Users\\jdbba\\OneDrive\\Documents\\School\\Research\\DataSets\\Zach's karate club\\karate\\karate.gml", format="gml")
plot(xlist)
##Persistant Homology of 1st graph
Diag<-ripsDiag(distances(xlist),1,6, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
distances(xlist)
plot(Diag[["diagram"]], col='red')
##Cluster WalkTrap
#Modularity
wtc<-cluster_edge_betweenness(xlist)
plot(wtc, xlist )
merges(wtc)
## Load package
library(igraph)
library(TDA)
#Zachs karate club
xlist<-read.graph("C:\\Users\\jdbba\\OneDrive\\Documents\\School\\Research\\DataSets\\Zach's karate club\\karate\\karate.gml", format="gml")
plot(xlist)
##Persistant Homology of 1st graph
Diag<-ripsDiag(distances(xlist),1,6, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
distances(xlist)
plot(Diag[["diagram"]], col='red')
##Cluster WalkTrap
#Modularity
wtc<-cluster_edge_betweenness(xlist)
wtc
## Load package
library(igraph)
library(TDA)
#Zachs karate club
xlist<-read.graph("C:\\Users\\jdbba\\OneDrive\\Documents\\School\\Research\\DataSets\\Zach's karate club\\karate\\karate.gml", format="gml")
plot(xlist)
##Persistant Homology of 1st graph
Diag<-ripsDiag(distances(xlist),1,6, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
distances(xlist)
plot(Diag[["diagram"]], col='red')
##Cluster WalkTrap
#Modularity
wtc<-cluster_edge_betweenness(xlist)
wtc
plot(wtc, xlist )
merges(wtc)
##Persistant Homology of modular graph
mDiag <- ripsDiag(merges(wtc),1,25, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
summary(mDiag)
mDiag[["diagram"]]
## Load package
library(igraph)
library(TDA)
#Zachs karate club
xlist<-read.graph("C:\\Users\\jdbba\\OneDrive\\Documents\\School\\Research\\DataSets\\Zach's karate club\\karate\\karate.gml", format="gml")
plot(xlist)
##Persistant Homology of 1st graph
Diag<-ripsDiag(distances(xlist),1,6, dist = "euclidean", library = "Dionysus",location = TRUE, printProgress = FALSE)
distances(xlist)
plot(Diag[["diagram"]], col='red')
Diag[["diagram"]]
