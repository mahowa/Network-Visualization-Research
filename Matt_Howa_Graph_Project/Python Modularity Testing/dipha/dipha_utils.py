import numpy as np
from struct import *

'''
Function to write distance matrix to binary dipha input file
Inputs : 
  dist  : input pairwise distance matrix
          (it must be a square symmetric matrix 
           with 0 on diagonal. The function doesn't perform this
           input verification)

  fname : a string with 
            [full path to location]/filename.bin 
          to write file (extension .bin is required by dipha)
'''


def writeDistBin(dist, fname):
    magicN = 8067171840
    ftype = 7
    m, n = np.shape(dist)
    print('input matrix size : ' + str(m) + ', ' + str(n) + '\n')

    ## flatten the matrix
    dflat = [ii for sub in dist for ii in sub]

    ## first three values are integers
    ## magicN : indicates that this is a dipha file
    ## ftype  : file type (7 => distance matrix)
    ## m      : number of rows / columns (dist must be m x m matrix)
    packBin = pack('q' * 3 + 'd' * (m * m), *([magicN, ftype, m] + dflat))
    with open(fname, 'wb') as f:
        f.write(packBin)

    return (True)


'''
Function to read binary dipha persistent diagram file and 
write in to a plain text file

Inputs : 
  infile  : string containing
              [full-path-to-location]/fname.bin
            of the dipha persistent diagram binary file
            (this is the output file generated by dipha)

  outfile : string containing
            [full path to location]/fname.txt
          to write the plain text persistent diagram file
'''


def writeDiagTxt((infile, outfile)):
    with open(infile, 'rb') as f:
        binData = f.read();

    flag = False;
    if (len(binData) >= 24):
        magicN, fType, nPoints = unpack('3q', binData[:24]);

        if (magicN != 8067171840):
            print('Magic number does not match. Not a dipha file');

        elif (ftype != 2):
            print('File type does not match');

        else:
            diag = unpack('qdd' * nPoints, binData[24:]);
            diag = np.asarray(diag).reshape(nPoints, 3);

            with open(outf, 'w') as fp:
                for row in diag:
                    fp.write(" ".join([str(i) for i in row]) + '\n');

            flag = True;

    else:
        print('file is too small. Re-check the input');

    return (flag);
